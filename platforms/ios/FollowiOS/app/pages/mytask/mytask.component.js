"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var router_1 = require("@angular/router");
var core_1 = require("@angular/core");
var observable_array_1 = require("tns-core-modules/data/observable-array");
var firebase = require("nativescript-plugin-firebase");
var application_settings_1 = require("application-settings");
var listviewitems_1 = require("../../service/listviewitems");
var timerModule = require("tns-core-modules/timer");
var MyTaskComponent = (function () {
    function MyTaskComponent(router) {
        this.router = router;
        this.dataItems = new observable_array_1.ObservableArray([]);
        this.listViewItems = new listviewitems_1.ListViewItems;
    }
    MyTaskComponent.prototype.ngOnInit = function () {
        this.dataItems = this.listViewItems.getMyTaskdetails();
        //   console.log("Grid=="+this.gridLayout.page.getViewById("grid1"));
    };
    MyTaskComponent.prototype.onSwipeCellStarted = function (args) {
        var swipeLimits = args.data.swipeLimits;
        var swipeView = args['object'];
        var leftItem = swipeView.getViewById('deleteView');
        var rightItem = swipeView.getViewById('doneView');
        swipeLimits.left = leftItem.getMeasuredWidth();
        swipeLimits.right = rightItem.getMeasuredWidth();
        swipeLimits.threshold = leftItem.getMeasuredWidth() / 2;
    };
    MyTaskComponent.prototype.onPullToRefreshInitiated = function (args) {
        console.log("Pul to refresh");
        this.dataItems = this.listViewItems.getMyTaskdetails();
        timerModule.setTimeout(function () {
            var listView = args.object;
            listView.notifyPullToRefreshFinished();
        }, 1000);
    };
    MyTaskComponent.prototype.doneTask = function (args) {
        var _this = this;
        var tapIndex = this.dataItems.indexOf(args.object.bindingContext);
        console.log("Item Kay======" + this.dataItems.getItem(tapIndex).key);
        console.log("Task Name======" + this.dataItems.getItem(tapIndex).taskName);
        var devicePhoneNumber = application_settings_1.getString("devicePhoneNumber");
        firebase.update('/MyTaskDetails/' + devicePhoneNumber + '/' + this.dataItems.getItem(tapIndex).key, {
            'myCompletionStatus': true,
        }).then(function (res) {
            console.log("Task has been upadates successfully in my task details---" + res);
            _this.dataItems = _this.listViewItems.getMyTaskdetails();
        }, function (res) {
            console.log("Problem in updating my task details---" + res);
        });
    };
    MyTaskComponent.prototype.deleteTask = function (args) {
        var _this = this;
        var tapIndex = this.dataItems.indexOf(args.object.bindingContext);
        console.log("Item Kay======" + this.dataItems.getItem(tapIndex).key);
        console.log("Task Name======" + this.dataItems.getItem(tapIndex).taskName);
        var devicePhoneNumber = application_settings_1.getString("devicePhoneNumber");
        firebase.remove('/MyTaskDetails/' + devicePhoneNumber + '/' + this.dataItems.getItem(tapIndex).key).then(function (res) {
            console.log("Task has been upadates successfully in my task details---" + res);
            _this.dataItems = _this.listViewItems.getMyTaskdetails();
        }, function (res) {
            console.log("Problem in updating my task details---" + res);
        });
    };
    MyTaskComponent.prototype.createTask = function () {
        this.router.navigate(["/createtask"]);
    };
    return MyTaskComponent;
}());
MyTaskComponent = __decorate([
    core_1.Component({
        selector: "my-app",
        // providers: [DataItemService],
        templateUrl: "pages/mytask/mytask.html",
        styleUrls: ["pages/mytask/mytask-common.css", "pages/mytask/mytask.css"]
    }),
    __metadata("design:paramtypes", [router_1.Router])
], MyTaskComponent);
exports.MyTaskComponent = MyTaskComponent;
//# sourceMappingURL=data:application/json;base64,